// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*blockMetadataV2Marshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BlockMetadataV2) MarshalJSON() ([]byte, error) {
	type BlockMetadataV2 struct {
		AnchorBlockHash  common.Hash                 `json:"anchorBlockHash"  gencodec:"required"`
		Difficulty       common.Hash                 `json:"difficulty"       gencodec:"required"`
		BlobHash         common.Hash                 `json:"blobHash"         gencodec:"required"`
		ExtraData        common.Hash                 `json:"extraData"        gencodec:"required"`
		Coinbase         common.Address              `json:"coinbase"         gencodec:"required"`
		Id               math.HexOrDecimal64         `json:"id"               gencodec:"required"`
		GasLimit         uint32                      `json:"gasLimit"         gencodec:"required"`
		Timestamp        math.HexOrDecimal64         `json:"timestamp"        gencodec:"required"`
		AnchorBlockId    math.HexOrDecimal64         `json:"anchorBlockId"    gencodec:"required"`
		MinTier          uint16                      `json:"minTier"          gencodec:"required"`
		BlobUsed         bool                        `json:"blobUsed"         gencodec:"required"`
		ParentMetaHash   common.Hash                 `json:"parentMetaHash"   gencodec:"required"`
		Proposer         common.Address              `json:"proposer"         gencodec:"required"`
		LivenessBond     *math.HexOrDecimal256       `json:"livenessBond"     gencodec:"required"`
		ProposedAt       math.HexOrDecimal64         `json:"proposedAt"       gencodec:"required"`
		ProposedIn       math.HexOrDecimal64         `json:"proposedIn"       gencodec:"required"`
		BlobTxListOffset uint32                      `json:"blobTxListOffset" gencodec:"required"`
		BlobTxListLength uint32                      `json:"blobTxListLength" gencodec:"required"`
		BlobIndex        uint8                       `json:"blobIndex"        gencodec:"required"`
		BaseFeeConfig    *LibSharedDataBaseFeeConfig `json:"baseFeeConfig"    gencodec:"required"`
	}
	var enc BlockMetadataV2
	enc.AnchorBlockHash = b.AnchorBlockHash
	enc.Difficulty = b.Difficulty
	enc.BlobHash = b.BlobHash
	enc.ExtraData = b.ExtraData
	enc.Coinbase = b.Coinbase
	enc.Id = math.HexOrDecimal64(b.Id)
	enc.GasLimit = b.GasLimit
	enc.Timestamp = math.HexOrDecimal64(b.Timestamp)
	enc.AnchorBlockId = math.HexOrDecimal64(b.AnchorBlockId)
	enc.MinTier = b.MinTier
	enc.BlobUsed = b.BlobUsed
	enc.ParentMetaHash = b.ParentMetaHash
	enc.Proposer = b.Proposer
	enc.LivenessBond = (*math.HexOrDecimal256)(b.LivenessBond)
	enc.ProposedAt = math.HexOrDecimal64(b.ProposedAt)
	enc.ProposedIn = math.HexOrDecimal64(b.ProposedIn)
	enc.BlobTxListOffset = b.BlobTxListOffset
	enc.BlobTxListLength = b.BlobTxListLength
	enc.BlobIndex = b.BlobIndex
	enc.BaseFeeConfig = b.BaseFeeConfig
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BlockMetadataV2) UnmarshalJSON(input []byte) error {
	type BlockMetadataV2 struct {
		AnchorBlockHash  *common.Hash                `json:"anchorBlockHash"  gencodec:"required"`
		Difficulty       *common.Hash                `json:"difficulty"       gencodec:"required"`
		BlobHash         *common.Hash                `json:"blobHash"         gencodec:"required"`
		ExtraData        *common.Hash                `json:"extraData"        gencodec:"required"`
		Coinbase         *common.Address             `json:"coinbase"         gencodec:"required"`
		Id               *math.HexOrDecimal64        `json:"id"               gencodec:"required"`
		GasLimit         *uint32                     `json:"gasLimit"         gencodec:"required"`
		Timestamp        *math.HexOrDecimal64        `json:"timestamp"        gencodec:"required"`
		AnchorBlockId    *math.HexOrDecimal64        `json:"anchorBlockId"    gencodec:"required"`
		MinTier          *uint16                     `json:"minTier"          gencodec:"required"`
		BlobUsed         *bool                       `json:"blobUsed"         gencodec:"required"`
		ParentMetaHash   *common.Hash                `json:"parentMetaHash"   gencodec:"required"`
		Proposer         *common.Address             `json:"proposer"         gencodec:"required"`
		LivenessBond     *math.HexOrDecimal256       `json:"livenessBond"     gencodec:"required"`
		ProposedAt       *math.HexOrDecimal64        `json:"proposedAt"       gencodec:"required"`
		ProposedIn       *math.HexOrDecimal64        `json:"proposedIn"       gencodec:"required"`
		BlobTxListOffset *uint32                     `json:"blobTxListOffset" gencodec:"required"`
		BlobTxListLength *uint32                     `json:"blobTxListLength" gencodec:"required"`
		BlobIndex        *uint8                      `json:"blobIndex"        gencodec:"required"`
		BaseFeeConfig    *LibSharedDataBaseFeeConfig `json:"baseFeeConfig"    gencodec:"required"`
	}
	var dec BlockMetadataV2
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.AnchorBlockHash == nil {
		return errors.New("missing required field 'anchorBlockHash' for BlockMetadataV2")
	}
	b.AnchorBlockHash = *dec.AnchorBlockHash
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for BlockMetadataV2")
	}
	b.Difficulty = *dec.Difficulty
	if dec.BlobHash == nil {
		return errors.New("missing required field 'blobHash' for BlockMetadataV2")
	}
	b.BlobHash = *dec.BlobHash
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for BlockMetadataV2")
	}
	b.ExtraData = *dec.ExtraData
	if dec.Coinbase == nil {
		return errors.New("missing required field 'coinbase' for BlockMetadataV2")
	}
	b.Coinbase = *dec.Coinbase
	if dec.Id == nil {
		return errors.New("missing required field 'id' for BlockMetadataV2")
	}
	b.Id = uint64(*dec.Id)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for BlockMetadataV2")
	}
	b.GasLimit = *dec.GasLimit
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for BlockMetadataV2")
	}
	b.Timestamp = uint64(*dec.Timestamp)
	if dec.AnchorBlockId == nil {
		return errors.New("missing required field 'anchorBlockId' for BlockMetadataV2")
	}
	b.AnchorBlockId = uint64(*dec.AnchorBlockId)
	if dec.MinTier == nil {
		return errors.New("missing required field 'minTier' for BlockMetadataV2")
	}
	b.MinTier = *dec.MinTier
	if dec.BlobUsed == nil {
		return errors.New("missing required field 'blobUsed' for BlockMetadataV2")
	}
	b.BlobUsed = *dec.BlobUsed
	if dec.ParentMetaHash == nil {
		return errors.New("missing required field 'parentMetaHash' for BlockMetadataV2")
	}
	b.ParentMetaHash = *dec.ParentMetaHash
	if dec.Proposer == nil {
		return errors.New("missing required field 'proposer' for BlockMetadataV2")
	}
	b.Proposer = *dec.Proposer
	if dec.LivenessBond == nil {
		return errors.New("missing required field 'livenessBond' for BlockMetadataV2")
	}
	b.LivenessBond = (*big.Int)(dec.LivenessBond)
	if dec.ProposedAt == nil {
		return errors.New("missing required field 'proposedAt' for BlockMetadataV2")
	}
	b.ProposedAt = uint64(*dec.ProposedAt)
	if dec.ProposedIn == nil {
		return errors.New("missing required field 'proposedIn' for BlockMetadataV2")
	}
	b.ProposedIn = uint64(*dec.ProposedIn)
	if dec.BlobTxListOffset == nil {
		return errors.New("missing required field 'blobTxListOffset' for BlockMetadataV2")
	}
	b.BlobTxListOffset = *dec.BlobTxListOffset
	if dec.BlobTxListLength == nil {
		return errors.New("missing required field 'blobTxListLength' for BlockMetadataV2")
	}
	b.BlobTxListLength = *dec.BlobTxListLength
	if dec.BlobIndex == nil {
		return errors.New("missing required field 'blobIndex' for BlockMetadataV2")
	}
	b.BlobIndex = *dec.BlobIndex
	if dec.BaseFeeConfig == nil {
		return errors.New("missing required field 'baseFeeConfig' for BlockMetadataV2")
	}
	b.BaseFeeConfig = dec.BaseFeeConfig
	return nil
}
