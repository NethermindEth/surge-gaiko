// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*blockProposedV2Marshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BlockProposedV2) MarshalJSON() ([]byte, error) {
	type BlockProposedV2 struct {
		BlockId *math.HexOrDecimal256 `json:"blockId" gencodec:"required"`
		Meta    *BlockMetadataV2      `json:"meta"    gencodec:"required"`
	}
	var enc BlockProposedV2
	enc.BlockId = (*math.HexOrDecimal256)(b.BlockId)
	enc.Meta = b.Meta
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BlockProposedV2) UnmarshalJSON(input []byte) error {
	type BlockProposedV2 struct {
		BlockId *math.HexOrDecimal256 `json:"blockId" gencodec:"required"`
		Meta    *BlockMetadataV2      `json:"meta"    gencodec:"required"`
	}
	var dec BlockProposedV2
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockId == nil {
		return errors.New("missing required field 'blockId' for BlockProposedV2")
	}
	b.BlockId = (*big.Int)(dec.BlockId)
	if dec.Meta == nil {
		return errors.New("missing required field 'meta' for BlockProposedV2")
	}
	b.Meta = dec.Meta
	return nil
}
