// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*batchProposedMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BatchProposed) MarshalJSON() ([]byte, error) {
	type BatchProposed struct {
		Info   *BatchInfo     `json:"info"   gencodec:"required"`
		Meta   *BatchMetadata `json:"meta"   gencodec:"required"`
		TxList hexutil.Bytes  `json:"txList" gencodec:"required"`
	}
	var enc BatchProposed
	enc.Info = b.Info
	enc.Meta = b.Meta
	enc.TxList = b.TxList
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BatchProposed) UnmarshalJSON(input []byte) error {
	type BatchProposed struct {
		Info   *BatchInfo     `json:"info"   gencodec:"required"`
		Meta   *BatchMetadata `json:"meta"   gencodec:"required"`
		TxList *hexutil.Bytes `json:"txList" gencodec:"required"`
	}
	var dec BatchProposed
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Info == nil {
		return errors.New("missing required field 'info' for BatchProposed")
	}
	b.Info = dec.Info
	if dec.Meta == nil {
		return errors.New("missing required field 'meta' for BatchProposed")
	}
	b.Meta = dec.Meta
	if dec.TxList == nil {
		return errors.New("missing required field 'txList' for BatchProposed")
	}
	b.TxList = *dec.TxList
	return nil
}
