// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash            common.Hash           `json:"parent_hash"              gencodec:"required"`
		OmmerHash             common.Hash           `json:"ommers_hash"              gencodec:"required"`
		Coinbase              common.Address        `json:"beneficiary"              gencodec:"required"`
		Root                  common.Hash           `json:"state_root"               gencodec:"required"`
		TxHash                common.Hash           `json:"transactions_root"        gencodec:"required"`
		ReceiptHash           common.Hash           `json:"receipts_root"            gencodec:"required"`
		Bloom                 types.Bloom           `json:"logs_bloom"               gencodec:"required"`
		Difficulty            *math.HexOrDecimal256 `json:"difficulty"               gencodec:"required"`
		Number                *math.HexOrDecimal256 `json:"number"                   gencodec:"required"`
		GasLimit              math.HexOrDecimal64   `json:"gas_limit"                gencodec:"required"`
		GasUsed               math.HexOrDecimal64   `json:"gas_used"                 gencodec:"required"`
		Time                  math.HexOrDecimal64   `json:"timestamp"                gencodec:"required"`
		Extra                 hexutil.Bytes         `json:"extra_data"               gencodec:"required"`
		MixDigest             common.Hash           `json:"mix_hash"                 gencodec:"required"`
		Nonce                 math.HexOrDecimal64   `json:"nonce"                    gencodec:"required"`
		BaseFee               *math.HexOrDecimal256 `json:"base_fee_per_gas"`
		WithdrawalsHash       *common.Hash          `json:"withdrawals_root"`
		BlobGasUsed           *math.HexOrDecimal64  `json:"blob_gas_used"`
		ExcessBlobGas         *math.HexOrDecimal64  `json:"excess_blob_gas"`
		ParentBeaconBlockRoot *common.Hash          `json:"parent_beacon_block_root"`
		RequestsRoot          *common.Hash          `json:"requests_hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.OmmerHash = h.OmmerHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*math.HexOrDecimal256)(h.Difficulty)
	enc.Number = (*math.HexOrDecimal256)(h.Number)
	enc.GasLimit = math.HexOrDecimal64(h.GasLimit)
	enc.GasUsed = math.HexOrDecimal64(h.GasUsed)
	enc.Time = math.HexOrDecimal64(h.Time)
	enc.Extra = h.Extra
	enc.MixDigest = h.MixDigest
	enc.Nonce = math.HexOrDecimal64(h.Nonce)
	enc.BaseFee = (*math.HexOrDecimal256)(h.BaseFee)
	enc.WithdrawalsHash = h.WithdrawalsHash
	enc.BlobGasUsed = (*math.HexOrDecimal64)(h.BlobGasUsed)
	enc.ExcessBlobGas = (*math.HexOrDecimal64)(h.ExcessBlobGas)
	enc.ParentBeaconBlockRoot = h.ParentBeaconBlockRoot
	enc.RequestsRoot = h.RequestsRoot
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash            *common.Hash          `json:"parent_hash"              gencodec:"required"`
		OmmerHash             *common.Hash          `json:"ommers_hash"              gencodec:"required"`
		Coinbase              *common.Address       `json:"beneficiary"              gencodec:"required"`
		Root                  *common.Hash          `json:"state_root"               gencodec:"required"`
		TxHash                *common.Hash          `json:"transactions_root"        gencodec:"required"`
		ReceiptHash           *common.Hash          `json:"receipts_root"            gencodec:"required"`
		Bloom                 *types.Bloom          `json:"logs_bloom"               gencodec:"required"`
		Difficulty            *math.HexOrDecimal256 `json:"difficulty"               gencodec:"required"`
		Number                *math.HexOrDecimal256 `json:"number"                   gencodec:"required"`
		GasLimit              *math.HexOrDecimal64  `json:"gas_limit"                gencodec:"required"`
		GasUsed               *math.HexOrDecimal64  `json:"gas_used"                 gencodec:"required"`
		Time                  *math.HexOrDecimal64  `json:"timestamp"                gencodec:"required"`
		Extra                 *hexutil.Bytes        `json:"extra_data"               gencodec:"required"`
		MixDigest             *common.Hash          `json:"mix_hash"                 gencodec:"required"`
		Nonce                 *math.HexOrDecimal64  `json:"nonce"                    gencodec:"required"`
		BaseFee               *math.HexOrDecimal256 `json:"base_fee_per_gas"`
		WithdrawalsHash       *common.Hash          `json:"withdrawals_root"`
		BlobGasUsed           *math.HexOrDecimal64  `json:"blob_gas_used"`
		ExcessBlobGas         *math.HexOrDecimal64  `json:"excess_blob_gas"`
		ParentBeaconBlockRoot *common.Hash          `json:"parent_beacon_block_root"`
		RequestsRoot          *common.Hash          `json:"requests_hash"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parent_hash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.OmmerHash == nil {
		return errors.New("missing required field 'ommers_hash' for Header")
	}
	h.OmmerHash = *dec.OmmerHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'beneficiary' for Header")
	}
	h.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'state_root' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactions_root' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receipts_root' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logs_bloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas_limit' for Header")
	}
	h.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gas_used' for Header")
	}
	h.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extra_data' for Header")
	}
	h.Extra = *dec.Extra
	if dec.MixDigest == nil {
		return errors.New("missing required field 'mix_hash' for Header")
	}
	h.MixDigest = *dec.MixDigest
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for Header")
	}
	h.Nonce = uint64(*dec.Nonce)
	if dec.BaseFee != nil {
		h.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.WithdrawalsHash != nil {
		h.WithdrawalsHash = dec.WithdrawalsHash
	}
	if dec.BlobGasUsed != nil {
		h.BlobGasUsed = (*uint64)(dec.BlobGasUsed)
	}
	if dec.ExcessBlobGas != nil {
		h.ExcessBlobGas = (*uint64)(dec.ExcessBlobGas)
	}
	if dec.ParentBeaconBlockRoot != nil {
		h.ParentBeaconBlockRoot = dec.ParentBeaconBlockRoot
	}
	if dec.RequestsRoot != nil {
		h.RequestsRoot = dec.RequestsRoot
	}
	return nil
}
