// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*batchMetadataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BatchMetadata) MarshalJSON() ([]byte, error) {
	type BatchMetadata struct {
		InfoHash   common.Hash         `json:"infoHash"   gencodec:"required"`
		Proposer   common.Address      `json:"proposer"   gencodec:"required"`
		BatchId    math.HexOrDecimal64 `json:"batchId"    gencodec:"required"`
		ProposedAt math.HexOrDecimal64 `json:"proposedAt" gencodec:"required"`
	}
	var enc BatchMetadata
	enc.InfoHash = b.InfoHash
	enc.Proposer = b.Proposer
	enc.BatchId = math.HexOrDecimal64(b.BatchId)
	enc.ProposedAt = math.HexOrDecimal64(b.ProposedAt)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BatchMetadata) UnmarshalJSON(input []byte) error {
	type BatchMetadata struct {
		InfoHash   *common.Hash         `json:"infoHash"   gencodec:"required"`
		Proposer   *common.Address      `json:"proposer"   gencodec:"required"`
		BatchId    *math.HexOrDecimal64 `json:"batchId"    gencodec:"required"`
		ProposedAt *math.HexOrDecimal64 `json:"proposedAt" gencodec:"required"`
	}
	var dec BatchMetadata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.InfoHash == nil {
		return errors.New("missing required field 'infoHash' for BatchMetadata")
	}
	b.InfoHash = *dec.InfoHash
	if dec.Proposer == nil {
		return errors.New("missing required field 'proposer' for BatchMetadata")
	}
	b.Proposer = *dec.Proposer
	if dec.BatchId == nil {
		return errors.New("missing required field 'batchId' for BatchMetadata")
	}
	b.BatchId = uint64(*dec.BatchId)
	if dec.ProposedAt == nil {
		return errors.New("missing required field 'proposedAt' for BatchMetadata")
	}
	b.ProposedAt = uint64(*dec.ProposedAt)
	return nil
}
