// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*withdrawalRequestMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (w WithdrawalRequest) MarshalJSON() ([]byte, error) {
	type WithdrawalRequest struct {
		SourceAddress   common.Address      `json:"sourceAddress" gencodec:"required"`
		ValidatorPubkey hexutil.Bytes       `json:"validatorPubkey" gencodec:"required"`
		Amount          math.HexOrDecimal64 `json:"amount" gencodec:"required"`
	}
	var enc WithdrawalRequest
	enc.SourceAddress = w.SourceAddress
	enc.ValidatorPubkey = w.ValidatorPubkey[:]
	enc.Amount = math.HexOrDecimal64(w.Amount)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (w *WithdrawalRequest) UnmarshalJSON(input []byte) error {
	type WithdrawalRequest struct {
		SourceAddress   *common.Address      `json:"sourceAddress" gencodec:"required"`
		ValidatorPubkey *hexutil.Bytes       `json:"validatorPubkey" gencodec:"required"`
		Amount          *math.HexOrDecimal64 `json:"amount" gencodec:"required"`
	}
	var dec WithdrawalRequest
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.SourceAddress == nil {
		return errors.New("missing required field 'sourceAddress' for WithdrawalRequest")
	}
	w.SourceAddress = *dec.SourceAddress
	if dec.ValidatorPubkey == nil {
		return errors.New("missing required field 'validatorPubkey' for WithdrawalRequest")
	}
	if len(*dec.ValidatorPubkey) != len(w.ValidatorPubkey) {
		return errors.New("field 'validatorPubkey' has wrong length, need 48 items")
	}
	copy(w.ValidatorPubkey[:], *dec.ValidatorPubkey)
	if dec.Amount == nil {
		return errors.New("missing required field 'amount' for WithdrawalRequest")
	}
	w.Amount = uint64(*dec.Amount)
	return nil
}
