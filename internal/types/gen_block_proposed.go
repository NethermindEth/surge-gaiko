// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*blockProposedMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BlockProposed) MarshalJSON() ([]byte, error) {
	type BlockProposed struct {
		BlockId           *math.HexOrDecimal256 `json:"blockId"           gencodec:"required"`
		AssignedProver    common.Address        `json:"assignedProver"    gencodec:"required"`
		LivenessBond      *math.HexOrDecimal256 `json:"livenessBond"      gencodec:"required"`
		Meta              *BlockMetadata        `json:"meta"              gencodec:"required"`
		DepositsProcessed []*EthDeposit         `json:"depositsProcessed" gencodec:"required"`
	}
	var enc BlockProposed
	enc.BlockId = (*math.HexOrDecimal256)(b.BlockId)
	enc.AssignedProver = b.AssignedProver
	enc.LivenessBond = (*math.HexOrDecimal256)(b.LivenessBond)
	enc.Meta = b.Meta
	enc.DepositsProcessed = b.DepositsProcessed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BlockProposed) UnmarshalJSON(input []byte) error {
	type BlockProposed struct {
		BlockId           *math.HexOrDecimal256 `json:"blockId"           gencodec:"required"`
		AssignedProver    *common.Address       `json:"assignedProver"    gencodec:"required"`
		LivenessBond      *math.HexOrDecimal256 `json:"livenessBond"      gencodec:"required"`
		Meta              *BlockMetadata        `json:"meta"              gencodec:"required"`
		DepositsProcessed []*EthDeposit         `json:"depositsProcessed" gencodec:"required"`
	}
	var dec BlockProposed
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BlockId == nil {
		return errors.New("missing required field 'blockId' for BlockProposed")
	}
	b.BlockId = (*big.Int)(dec.BlockId)
	if dec.AssignedProver == nil {
		return errors.New("missing required field 'assignedProver' for BlockProposed")
	}
	b.AssignedProver = *dec.AssignedProver
	if dec.LivenessBond == nil {
		return errors.New("missing required field 'livenessBond' for BlockProposed")
	}
	b.LivenessBond = (*big.Int)(dec.LivenessBond)
	if dec.Meta == nil {
		return errors.New("missing required field 'meta' for BlockProposed")
	}
	b.Meta = dec.Meta
	if dec.DepositsProcessed == nil {
		return errors.New("missing required field 'depositsProcessed' for BlockProposed")
	}
	b.DepositsProcessed = dec.DepositsProcessed
	return nil
}
