// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*batchInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BatchInfo) MarshalJSON() ([]byte, error) {
	type BatchInfo struct {
		TxsHash            common.Hash
		Blocks             []*BlockParams
		BlobHashes         []common.Hash
		ExtraData          common.Hash
		Coinbase           common.Address
		ProposedIn         math.HexOrDecimal64
		BlobByteOffset     uint32
		BlobByteSize       uint32
		GasLimit           uint32
		LastBlockId        math.HexOrDecimal64
		LastBlockTimestamp math.HexOrDecimal64
		AnchorBlockId      math.HexOrDecimal64
		AnchorBlockHash    common.Hash
		BaseFeeConfig      *LibSharedDataBaseFeeConfig
	}
	var enc BatchInfo
	enc.TxsHash = b.TxsHash
	enc.Blocks = b.Blocks
	enc.BlobHashes = b.BlobHashes
	enc.ExtraData = b.ExtraData
	enc.Coinbase = b.Coinbase
	enc.ProposedIn = math.HexOrDecimal64(b.ProposedIn)
	enc.BlobByteOffset = b.BlobByteOffset
	enc.BlobByteSize = b.BlobByteSize
	enc.GasLimit = b.GasLimit
	enc.LastBlockId = math.HexOrDecimal64(b.LastBlockId)
	enc.LastBlockTimestamp = math.HexOrDecimal64(b.LastBlockTimestamp)
	enc.AnchorBlockId = math.HexOrDecimal64(b.AnchorBlockId)
	enc.AnchorBlockHash = b.AnchorBlockHash
	enc.BaseFeeConfig = b.BaseFeeConfig
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BatchInfo) UnmarshalJSON(input []byte) error {
	type BatchInfo struct {
		TxsHash            *common.Hash
		Blocks             []*BlockParams
		BlobHashes         []common.Hash
		ExtraData          *common.Hash
		Coinbase           *common.Address
		ProposedIn         *math.HexOrDecimal64
		BlobByteOffset     *uint32
		BlobByteSize       *uint32
		GasLimit           *uint32
		LastBlockId        *math.HexOrDecimal64
		LastBlockTimestamp *math.HexOrDecimal64
		AnchorBlockId      *math.HexOrDecimal64
		AnchorBlockHash    *common.Hash
		BaseFeeConfig      *LibSharedDataBaseFeeConfig
	}
	var dec BatchInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.TxsHash != nil {
		b.TxsHash = *dec.TxsHash
	}
	if dec.Blocks != nil {
		b.Blocks = dec.Blocks
	}
	if dec.BlobHashes != nil {
		b.BlobHashes = dec.BlobHashes
	}
	if dec.ExtraData != nil {
		b.ExtraData = *dec.ExtraData
	}
	if dec.Coinbase != nil {
		b.Coinbase = *dec.Coinbase
	}
	if dec.ProposedIn != nil {
		b.ProposedIn = uint64(*dec.ProposedIn)
	}
	if dec.BlobByteOffset != nil {
		b.BlobByteOffset = *dec.BlobByteOffset
	}
	if dec.BlobByteSize != nil {
		b.BlobByteSize = *dec.BlobByteSize
	}
	if dec.GasLimit != nil {
		b.GasLimit = *dec.GasLimit
	}
	if dec.LastBlockId != nil {
		b.LastBlockId = uint64(*dec.LastBlockId)
	}
	if dec.LastBlockTimestamp != nil {
		b.LastBlockTimestamp = uint64(*dec.LastBlockTimestamp)
	}
	if dec.AnchorBlockId != nil {
		b.AnchorBlockId = uint64(*dec.AnchorBlockId)
	}
	if dec.AnchorBlockHash != nil {
		b.AnchorBlockHash = *dec.AnchorBlockHash
	}
	if dec.BaseFeeConfig != nil {
		b.BaseFeeConfig = dec.BaseFeeConfig
	}
	return nil
}
