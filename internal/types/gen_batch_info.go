// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*batchInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BatchInfo) MarshalJSON() ([]byte, error) {
	type BatchInfo struct {
		TxsHash            common.Hash                 `json:"txsHash"            gencodec:"required"`
		Blocks             []*BlockParams              `json:"blocks"             gencodec:"required"`
		BlobHashes         []common.Hash               `json:"blobHashes"         gencodec:"required"`
		ExtraData          common.Hash                 `json:"extraData"          gencodec:"required"`
		Coinbase           common.Address              `json:"coinbase"           gencodec:"required"`
		ProposedIn         math.HexOrDecimal64         `json:"proposedIn"         gencodec:"required"`
		BlobByteOffset     uint32                      `json:"blobByteOffset"     gencodec:"required"`
		BlobByteSize       uint32                      `json:"blobByteSize"       gencodec:"required"`
		BlobCreatedIn      math.HexOrDecimal64         `json:"blobCreatedIn"      gencodec:"required"`
		GasLimit           uint32                      `json:"gasLimit"           gencodec:"required"`
		LastBlockId        math.HexOrDecimal64         `json:"lastBlockId"        gencodec:"required"`
		LastBlockTimestamp math.HexOrDecimal64         `json:"lastBlockTimestamp" gencodec:"required"`
		AnchorBlockId      math.HexOrDecimal64         `json:"anchorBlockId"      gencodec:"required"`
		AnchorBlockHash    common.Hash                 `json:"anchorBlockHash"    gencodec:"required"`
		BaseFeeConfig      *LibSharedDataBaseFeeConfig `json:"baseFeeConfig"      gencodec:"required"`
	}
	var enc BatchInfo
	enc.TxsHash = b.TxsHash
	enc.Blocks = b.Blocks
	if b.BlobHashes != nil {
		enc.BlobHashes = make([]common.Hash, len(b.BlobHashes))
		for k, v := range b.BlobHashes {
			enc.BlobHashes[k] = v
		}
	}
	enc.ExtraData = b.ExtraData
	enc.Coinbase = b.Coinbase
	enc.ProposedIn = math.HexOrDecimal64(b.ProposedIn)
	enc.BlobByteOffset = b.BlobByteOffset
	enc.BlobByteSize = b.BlobByteSize
	enc.BlobCreatedIn = math.HexOrDecimal64(b.BlobCreatedIn)
	enc.GasLimit = b.GasLimit
	enc.LastBlockId = math.HexOrDecimal64(b.LastBlockId)
	enc.LastBlockTimestamp = math.HexOrDecimal64(b.LastBlockTimestamp)
	enc.AnchorBlockId = math.HexOrDecimal64(b.AnchorBlockId)
	enc.AnchorBlockHash = b.AnchorBlockHash
	enc.BaseFeeConfig = b.BaseFeeConfig
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BatchInfo) UnmarshalJSON(input []byte) error {
	type BatchInfo struct {
		TxsHash            *common.Hash                `json:"txsHash"            gencodec:"required"`
		Blocks             []*BlockParams              `json:"blocks"             gencodec:"required"`
		BlobHashes         []common.Hash               `json:"blobHashes"         gencodec:"required"`
		ExtraData          *common.Hash                `json:"extraData"          gencodec:"required"`
		Coinbase           *common.Address             `json:"coinbase"           gencodec:"required"`
		ProposedIn         *math.HexOrDecimal64        `json:"proposedIn"         gencodec:"required"`
		BlobByteOffset     *uint32                     `json:"blobByteOffset"     gencodec:"required"`
		BlobByteSize       *uint32                     `json:"blobByteSize"       gencodec:"required"`
		BlobCreatedIn      *math.HexOrDecimal64        `json:"blobCreatedIn"      gencodec:"required"`
		GasLimit           *uint32                     `json:"gasLimit"           gencodec:"required"`
		LastBlockId        *math.HexOrDecimal64        `json:"lastBlockId"        gencodec:"required"`
		LastBlockTimestamp *math.HexOrDecimal64        `json:"lastBlockTimestamp" gencodec:"required"`
		AnchorBlockId      *math.HexOrDecimal64        `json:"anchorBlockId"      gencodec:"required"`
		AnchorBlockHash    *common.Hash                `json:"anchorBlockHash"    gencodec:"required"`
		BaseFeeConfig      *LibSharedDataBaseFeeConfig `json:"baseFeeConfig"      gencodec:"required"`
	}
	var dec BatchInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.TxsHash == nil {
		return errors.New("missing required field 'txsHash' for BatchInfo")
	}
	b.TxsHash = *dec.TxsHash
	if dec.Blocks == nil {
		return errors.New("missing required field 'blocks' for BatchInfo")
	}
	b.Blocks = dec.Blocks
	if dec.BlobHashes == nil {
		return errors.New("missing required field 'blobHashes' for BatchInfo")
	}
	b.BlobHashes = make([][32]byte, len(dec.BlobHashes))
	for k, v := range dec.BlobHashes {
		b.BlobHashes[k] = v
	}
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for BatchInfo")
	}
	b.ExtraData = *dec.ExtraData
	if dec.Coinbase == nil {
		return errors.New("missing required field 'coinbase' for BatchInfo")
	}
	b.Coinbase = *dec.Coinbase
	if dec.ProposedIn == nil {
		return errors.New("missing required field 'proposedIn' for BatchInfo")
	}
	b.ProposedIn = uint64(*dec.ProposedIn)
	if dec.BlobByteOffset == nil {
		return errors.New("missing required field 'blobByteOffset' for BatchInfo")
	}
	b.BlobByteOffset = *dec.BlobByteOffset
	if dec.BlobByteSize == nil {
		return errors.New("missing required field 'blobByteSize' for BatchInfo")
	}
	b.BlobByteSize = *dec.BlobByteSize
	if dec.BlobCreatedIn == nil {
		return errors.New("missing required field 'blobCreatedIn' for BatchInfo")
	}
	b.BlobCreatedIn = uint64(*dec.BlobCreatedIn)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for BatchInfo")
	}
	b.GasLimit = *dec.GasLimit
	if dec.LastBlockId == nil {
		return errors.New("missing required field 'lastBlockId' for BatchInfo")
	}
	b.LastBlockId = uint64(*dec.LastBlockId)
	if dec.LastBlockTimestamp == nil {
		return errors.New("missing required field 'lastBlockTimestamp' for BatchInfo")
	}
	b.LastBlockTimestamp = uint64(*dec.LastBlockTimestamp)
	if dec.AnchorBlockId == nil {
		return errors.New("missing required field 'anchorBlockId' for BatchInfo")
	}
	b.AnchorBlockId = uint64(*dec.AnchorBlockId)
	if dec.AnchorBlockHash == nil {
		return errors.New("missing required field 'anchorBlockHash' for BatchInfo")
	}
	b.AnchorBlockHash = *dec.AnchorBlockHash
	if dec.BaseFeeConfig == nil {
		return errors.New("missing required field 'baseFeeConfig' for BatchInfo")
	}
	b.BaseFeeConfig = dec.BaseFeeConfig
	return nil
}
