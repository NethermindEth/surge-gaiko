// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*blockMetadataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BlockMetadata) MarshalJSON() ([]byte, error) {
	type BlockMetadata struct {
		L1Hash         common.Hash         `json:"l1Hash"         gencodec:"required"`
		Difficulty     common.Hash         `json:"difficulty"     gencodec:"required"`
		BlobHash       common.Hash         `json:"blobHash"       gencodec:"required"`
		ExtraData      common.Hash         `json:"extraData"      gencodec:"required"`
		DepositsHash   common.Hash         `json:"depositsHash"   gencodec:"required"`
		Coinbase       common.Address      `json:"coinbase"       gencodec:"required"`
		ID             math.HexOrDecimal64 `json:"id"             gencodec:"required"`
		GasLimit       uint32              `json:"gasLimit"       gencodec:"required"`
		Timestamp      math.HexOrDecimal64 `json:"timestamp"      gencodec:"required"`
		L1Height       math.HexOrDecimal64 `json:"l1Height"       gencodec:"required"`
		MinTier        uint16              `json:"minTier"        gencodec:"required"`
		BlobUsed       bool                `json:"blobUsed"       gencodec:"required"`
		ParentMetaHash common.Hash         `json:"parentMetaHash" gencodec:"required"`
		Sender         common.Address      `json:"sender"         gencodec:"required"`
	}
	var enc BlockMetadata
	enc.L1Hash = b.L1Hash
	enc.Difficulty = b.Difficulty
	enc.BlobHash = b.BlobHash
	enc.ExtraData = b.ExtraData
	enc.DepositsHash = b.DepositsHash
	enc.Coinbase = b.Coinbase
	enc.ID = math.HexOrDecimal64(b.ID)
	enc.GasLimit = b.GasLimit
	enc.Timestamp = math.HexOrDecimal64(b.Timestamp)
	enc.L1Height = math.HexOrDecimal64(b.L1Height)
	enc.MinTier = b.MinTier
	enc.BlobUsed = b.BlobUsed
	enc.ParentMetaHash = b.ParentMetaHash
	enc.Sender = b.Sender
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BlockMetadata) UnmarshalJSON(input []byte) error {
	type BlockMetadata struct {
		L1Hash         *common.Hash         `json:"l1Hash"         gencodec:"required"`
		Difficulty     *common.Hash         `json:"difficulty"     gencodec:"required"`
		BlobHash       *common.Hash         `json:"blobHash"       gencodec:"required"`
		ExtraData      *common.Hash         `json:"extraData"      gencodec:"required"`
		DepositsHash   *common.Hash         `json:"depositsHash"   gencodec:"required"`
		Coinbase       *common.Address      `json:"coinbase"       gencodec:"required"`
		ID             *math.HexOrDecimal64 `json:"id"             gencodec:"required"`
		GasLimit       *uint32              `json:"gasLimit"       gencodec:"required"`
		Timestamp      *math.HexOrDecimal64 `json:"timestamp"      gencodec:"required"`
		L1Height       *math.HexOrDecimal64 `json:"l1Height"       gencodec:"required"`
		MinTier        *uint16              `json:"minTier"        gencodec:"required"`
		BlobUsed       *bool                `json:"blobUsed"       gencodec:"required"`
		ParentMetaHash *common.Hash         `json:"parentMetaHash" gencodec:"required"`
		Sender         *common.Address      `json:"sender"         gencodec:"required"`
	}
	var dec BlockMetadata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.L1Hash == nil {
		return errors.New("missing required field 'l1Hash' for BlockMetadata")
	}
	b.L1Hash = *dec.L1Hash
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for BlockMetadata")
	}
	b.Difficulty = *dec.Difficulty
	if dec.BlobHash == nil {
		return errors.New("missing required field 'blobHash' for BlockMetadata")
	}
	b.BlobHash = *dec.BlobHash
	if dec.ExtraData == nil {
		return errors.New("missing required field 'extraData' for BlockMetadata")
	}
	b.ExtraData = *dec.ExtraData
	if dec.DepositsHash == nil {
		return errors.New("missing required field 'depositsHash' for BlockMetadata")
	}
	b.DepositsHash = *dec.DepositsHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'coinbase' for BlockMetadata")
	}
	b.Coinbase = *dec.Coinbase
	if dec.ID == nil {
		return errors.New("missing required field 'id' for BlockMetadata")
	}
	b.ID = uint64(*dec.ID)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for BlockMetadata")
	}
	b.GasLimit = *dec.GasLimit
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for BlockMetadata")
	}
	b.Timestamp = uint64(*dec.Timestamp)
	if dec.L1Height == nil {
		return errors.New("missing required field 'l1Height' for BlockMetadata")
	}
	b.L1Height = uint64(*dec.L1Height)
	if dec.MinTier == nil {
		return errors.New("missing required field 'minTier' for BlockMetadata")
	}
	b.MinTier = *dec.MinTier
	if dec.BlobUsed == nil {
		return errors.New("missing required field 'blobUsed' for BlockMetadata")
	}
	b.BlobUsed = *dec.BlobUsed
	if dec.ParentMetaHash == nil {
		return errors.New("missing required field 'parentMetaHash' for BlockMetadata")
	}
	b.ParentMetaHash = *dec.ParentMetaHash
	if dec.Sender == nil {
		return errors.New("missing required field 'sender' for BlockMetadata")
	}
	b.Sender = *dec.Sender
	return nil
}
