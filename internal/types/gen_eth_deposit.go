// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*ethDepositMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e EthDeposit) MarshalJSON() ([]byte, error) {
	type EthDeposit struct {
		Recipient common.Address        `json:"recipient" gencodec:"required"`
		Amount    *math.HexOrDecimal256 `json:"amount"    gencodec:"required"`
		ID        math.HexOrDecimal64   `json:"id"        gencodec:"required"`
	}
	var enc EthDeposit
	enc.Recipient = e.Recipient
	enc.Amount = (*math.HexOrDecimal256)(e.Amount)
	enc.ID = math.HexOrDecimal64(e.ID)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *EthDeposit) UnmarshalJSON(input []byte) error {
	type EthDeposit struct {
		Recipient *common.Address       `json:"recipient" gencodec:"required"`
		Amount    *math.HexOrDecimal256 `json:"amount"    gencodec:"required"`
		ID        *math.HexOrDecimal64  `json:"id"        gencodec:"required"`
	}
	var dec EthDeposit
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Recipient == nil {
		return errors.New("missing required field 'recipient' for EthDeposit")
	}
	e.Recipient = *dec.Recipient
	if dec.Amount == nil {
		return errors.New("missing required field 'amount' for EthDeposit")
	}
	e.Amount = (*big.Int)(dec.Amount)
	if dec.ID == nil {
		return errors.New("missing required field 'id' for EthDeposit")
	}
	e.ID = uint64(*dec.ID)
	return nil
}
