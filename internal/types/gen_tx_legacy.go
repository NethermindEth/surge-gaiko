// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*txLegacyMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t TxLegacy) MarshalJSON() ([]byte, error) {
	type TxLegacy struct {
		ChainId  *math.HexOrDecimal256 `json:"chain_id"`
		Nonce    math.HexOrDecimal64   `json:"nonce"     gencodec:"required"`
		GasPrice *math.HexOrDecimal256 `json:"gas_price" gencodec:"required"`
		GasLimit math.HexOrDecimal64   `json:"gas_limit" gencodec:"required"`
		To       *common.Address       `json:"to"`
		Value    *math.HexOrDecimal256 `json:"value"     gencodec:"required"`
		Input    hexutil.Bytes         `json:"input"     gencodec:"required"`
	}
	var enc TxLegacy
	enc.ChainId = (*math.HexOrDecimal256)(t.ChainId)
	enc.Nonce = math.HexOrDecimal64(t.Nonce)
	enc.GasPrice = (*math.HexOrDecimal256)(t.GasPrice)
	enc.GasLimit = math.HexOrDecimal64(t.GasLimit)
	enc.To = t.To
	enc.Value = (*math.HexOrDecimal256)(t.Value)
	enc.Input = t.Input
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TxLegacy) UnmarshalJSON(input []byte) error {
	type TxLegacy struct {
		ChainId  *math.HexOrDecimal256 `json:"chain_id"`
		Nonce    *math.HexOrDecimal64  `json:"nonce"     gencodec:"required"`
		GasPrice *math.HexOrDecimal256 `json:"gas_price" gencodec:"required"`
		GasLimit *math.HexOrDecimal64  `json:"gas_limit" gencodec:"required"`
		To       *common.Address       `json:"to"`
		Value    *math.HexOrDecimal256 `json:"value"     gencodec:"required"`
		Input    *hexutil.Bytes        `json:"input"     gencodec:"required"`
	}
	var dec TxLegacy
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainId != nil {
		t.ChainId = (*big.Int)(dec.ChainId)
	}
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for TxLegacy")
	}
	t.Nonce = uint64(*dec.Nonce)
	if dec.GasPrice == nil {
		return errors.New("missing required field 'gas_price' for TxLegacy")
	}
	t.GasPrice = (*big.Int)(dec.GasPrice)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas_limit' for TxLegacy")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.To != nil {
		t.To = dec.To
	}
	if dec.Value == nil {
		return errors.New("missing required field 'value' for TxLegacy")
	}
	t.Value = (*big.Int)(dec.Value)
	if dec.Input == nil {
		return errors.New("missing required field 'input' for TxLegacy")
	}
	t.Input = *dec.Input
	return nil
}
