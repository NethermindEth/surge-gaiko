// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*signatureMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s Signature) MarshalJSON() ([]byte, error) {
	type Signature struct {
		R          *math.HexOrDecimal256 `json:"r"       gencodec:"required"`
		S          *math.HexOrDecimal256 `json:"s"       gencodec:"required"`
		OddYParity *math.HexOrDecimal256 `json:"yParity" gencodec:"required"`
	}
	var enc Signature
	enc.R = (*math.HexOrDecimal256)(s.R)
	enc.S = (*math.HexOrDecimal256)(s.S)
	enc.OddYParity = (*math.HexOrDecimal256)(s.OddYParity)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *Signature) UnmarshalJSON(input []byte) error {
	type Signature struct {
		R          *math.HexOrDecimal256 `json:"r"       gencodec:"required"`
		S          *math.HexOrDecimal256 `json:"s"       gencodec:"required"`
		OddYParity *math.HexOrDecimal256 `json:"yParity" gencodec:"required"`
	}
	var dec Signature
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.R == nil {
		return errors.New("missing required field 'r' for Signature")
	}
	s.R = (*big.Int)(dec.R)
	if dec.S == nil {
		return errors.New("missing required field 's' for Signature")
	}
	s.S = (*big.Int)(dec.S)
	if dec.OddYParity == nil {
		return errors.New("missing required field 'yParity' for Signature")
	}
	s.OddYParity = (*big.Int)(dec.OddYParity)
	return nil
}
