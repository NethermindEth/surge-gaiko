// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*txEip4844Marshaling)(nil)

// MarshalJSON marshals as JSON.
func (t TxEip4844) MarshalJSON() ([]byte, error) {
	type TxEip4844 struct {
		ChainID              *math.HexOrDecimal256 `json:"chain_id"                 gencodec:"required"`
		Nonce                math.HexOrDecimal64   `json:"nonce"                    gencodec:"required"`
		GasLimit             math.HexOrDecimal64   `json:"gas_limit"                gencodec:"required"`
		MaxFeePerGas         *math.HexOrDecimal256 `json:"max_fee_per_gas"          gencodec:"required"`
		MaxPriorityFeePerGas *math.HexOrDecimal256 `json:"max_priority_fee_per_gas" gencodec:"required"`
		To                   common.Address        `json:"to"                       gencodec:"required"`
		Value                *math.HexOrDecimal256 `json:"value"                    gencodec:"required"`
		AccessList           AccessList            `json:"access_list"              gencodec:"required"`
		BlobVersionedHashes  []common.Hash         `json:"blob_versioned_hashes"    gencodec:"required"`
		MaxFeePerBlobGas     *math.HexOrDecimal256 `json:"max_fee_per_blob_gas"     gencodec:"required"`
		Input                hexutil.Bytes         `json:"input"                    gencodec:"required"`
	}
	var enc TxEip4844
	enc.ChainID = (*math.HexOrDecimal256)(t.ChainID)
	enc.Nonce = math.HexOrDecimal64(t.Nonce)
	enc.GasLimit = math.HexOrDecimal64(t.GasLimit)
	enc.MaxFeePerGas = (*math.HexOrDecimal256)(t.MaxFeePerGas)
	enc.MaxPriorityFeePerGas = (*math.HexOrDecimal256)(t.MaxPriorityFeePerGas)
	enc.To = t.To
	enc.Value = (*math.HexOrDecimal256)(t.Value)
	enc.AccessList = t.AccessList
	enc.BlobVersionedHashes = t.BlobVersionedHashes
	enc.MaxFeePerBlobGas = (*math.HexOrDecimal256)(t.MaxFeePerBlobGas)
	enc.Input = t.Input
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *TxEip4844) UnmarshalJSON(input []byte) error {
	type TxEip4844 struct {
		ChainID              *math.HexOrDecimal256 `json:"chain_id"                 gencodec:"required"`
		Nonce                *math.HexOrDecimal64  `json:"nonce"                    gencodec:"required"`
		GasLimit             *math.HexOrDecimal64  `json:"gas_limit"                gencodec:"required"`
		MaxFeePerGas         *math.HexOrDecimal256 `json:"max_fee_per_gas"          gencodec:"required"`
		MaxPriorityFeePerGas *math.HexOrDecimal256 `json:"max_priority_fee_per_gas" gencodec:"required"`
		To                   *common.Address       `json:"to"                       gencodec:"required"`
		Value                *math.HexOrDecimal256 `json:"value"                    gencodec:"required"`
		AccessList           *AccessList           `json:"access_list"              gencodec:"required"`
		BlobVersionedHashes  []common.Hash         `json:"blob_versioned_hashes"    gencodec:"required"`
		MaxFeePerBlobGas     *math.HexOrDecimal256 `json:"max_fee_per_blob_gas"     gencodec:"required"`
		Input                *hexutil.Bytes        `json:"input"                    gencodec:"required"`
	}
	var dec TxEip4844
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ChainID == nil {
		return errors.New("missing required field 'chain_id' for TxEip4844")
	}
	t.ChainID = (*big.Int)(dec.ChainID)
	if dec.Nonce == nil {
		return errors.New("missing required field 'nonce' for TxEip4844")
	}
	t.Nonce = uint64(*dec.Nonce)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gas_limit' for TxEip4844")
	}
	t.GasLimit = uint64(*dec.GasLimit)
	if dec.MaxFeePerGas == nil {
		return errors.New("missing required field 'max_fee_per_gas' for TxEip4844")
	}
	t.MaxFeePerGas = (*big.Int)(dec.MaxFeePerGas)
	if dec.MaxPriorityFeePerGas == nil {
		return errors.New("missing required field 'max_priority_fee_per_gas' for TxEip4844")
	}
	t.MaxPriorityFeePerGas = (*big.Int)(dec.MaxPriorityFeePerGas)
	if dec.To == nil {
		return errors.New("missing required field 'to' for TxEip4844")
	}
	t.To = *dec.To
	if dec.Value == nil {
		return errors.New("missing required field 'value' for TxEip4844")
	}
	t.Value = (*big.Int)(dec.Value)
	if dec.AccessList == nil {
		return errors.New("missing required field 'access_list' for TxEip4844")
	}
	t.AccessList = *dec.AccessList
	if dec.BlobVersionedHashes == nil {
		return errors.New("missing required field 'blob_versioned_hashes' for TxEip4844")
	}
	t.BlobVersionedHashes = dec.BlobVersionedHashes
	if dec.MaxFeePerBlobGas == nil {
		return errors.New("missing required field 'max_fee_per_blob_gas' for TxEip4844")
	}
	t.MaxFeePerBlobGas = (*big.Int)(dec.MaxFeePerBlobGas)
	if dec.Input == nil {
		return errors.New("missing required field 'input' for TxEip4844")
	}
	t.Input = *dec.Input
	return nil
}
