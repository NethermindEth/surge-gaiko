// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package transition

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
)

// MarshalJSON marshals as JSON.
func (c ChainSpec) MarshalJSON() ([]byte, error) {
	type ChainSpec struct {
		Name                 string                                   `json:"name" gencodec:"required"`
		ChainID              uint64                                   `json:"chain_id" gencodec:"required"`
		MaxSpecID            SpecID                                   `json:"max_spec_id" gencodec:"required"`
		HardForks            HardForks                                `json:"hard_forks" gencodec:"required"`
		Eip1559Constants     Eip1559Constants                         `json:"eip1559_constants" gencodec:"required"`
		L1Contract           *common.Address                          `json:"l1_contract"`
		L2Contract           *common.Address                          `json:"l2_contract"`
		RPC                  string                                   `json:"rpc" gencodec:"required"`
		BeaconRPC            *string                                  `json:"beacon_rpc"`
		VerifierAddressForks map[SpecID]map[ProofType]*common.Address `json:"verifier_address_forks" gencodec:"required"`
		GenesisTime          uint64                                   `json:"genesis_time" gencodec:"required"`
		SecondsPerSlot       uint64                                   `json:"seconds_per_slot" gencodec:"required"`
		IsTaiko              bool                                     `json:"is_taiko" gencodec:"required"`
	}
	var enc ChainSpec
	enc.Name = c.Name
	enc.ChainID = c.ChainID
	enc.MaxSpecID = c.MaxSpecID
	enc.HardForks = c.HardForks
	enc.Eip1559Constants = c.Eip1559Constants
	enc.L1Contract = c.L1Contract
	enc.L2Contract = c.L2Contract
	enc.RPC = c.RPC
	enc.BeaconRPC = c.BeaconRPC
	enc.VerifierAddressForks = c.VerifierAddressForks
	enc.GenesisTime = c.GenesisTime
	enc.SecondsPerSlot = c.SecondsPerSlot
	enc.IsTaiko = c.IsTaiko
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *ChainSpec) UnmarshalJSON(input []byte) error {
	type ChainSpec struct {
		Name                 *string                                  `json:"name" gencodec:"required"`
		ChainID              *uint64                                  `json:"chain_id" gencodec:"required"`
		MaxSpecID            *SpecID                                  `json:"max_spec_id" gencodec:"required"`
		HardForks            *HardForks                               `json:"hard_forks" gencodec:"required"`
		Eip1559Constants     *Eip1559Constants                        `json:"eip1559_constants" gencodec:"required"`
		L1Contract           *common.Address                          `json:"l1_contract"`
		L2Contract           *common.Address                          `json:"l2_contract"`
		RPC                  *string                                  `json:"rpc" gencodec:"required"`
		BeaconRPC            *string                                  `json:"beacon_rpc"`
		VerifierAddressForks map[SpecID]map[ProofType]*common.Address `json:"verifier_address_forks" gencodec:"required"`
		GenesisTime          *uint64                                  `json:"genesis_time" gencodec:"required"`
		SecondsPerSlot       *uint64                                  `json:"seconds_per_slot" gencodec:"required"`
		IsTaiko              *bool                                    `json:"is_taiko" gencodec:"required"`
	}
	var dec ChainSpec
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Name == nil {
		return errors.New("missing required field 'name' for ChainSpec")
	}
	c.Name = *dec.Name
	if dec.ChainID == nil {
		return errors.New("missing required field 'chain_id' for ChainSpec")
	}
	c.ChainID = *dec.ChainID
	if dec.MaxSpecID == nil {
		return errors.New("missing required field 'max_spec_id' for ChainSpec")
	}
	c.MaxSpecID = *dec.MaxSpecID
	if dec.HardForks == nil {
		return errors.New("missing required field 'hard_forks' for ChainSpec")
	}
	c.HardForks = *dec.HardForks
	if dec.Eip1559Constants == nil {
		return errors.New("missing required field 'eip1559_constants' for ChainSpec")
	}
	c.Eip1559Constants = *dec.Eip1559Constants
	if dec.L1Contract != nil {
		c.L1Contract = dec.L1Contract
	}
	if dec.L2Contract != nil {
		c.L2Contract = dec.L2Contract
	}
	if dec.RPC == nil {
		return errors.New("missing required field 'rpc' for ChainSpec")
	}
	c.RPC = *dec.RPC
	if dec.BeaconRPC != nil {
		c.BeaconRPC = dec.BeaconRPC
	}
	if dec.VerifierAddressForks == nil {
		return errors.New("missing required field 'verifier_address_forks' for ChainSpec")
	}
	c.VerifierAddressForks = dec.VerifierAddressForks
	if dec.GenesisTime == nil {
		return errors.New("missing required field 'genesis_time' for ChainSpec")
	}
	c.GenesisTime = *dec.GenesisTime
	if dec.SecondsPerSlot == nil {
		return errors.New("missing required field 'seconds_per_slot' for ChainSpec")
	}
	c.SecondsPerSlot = *dec.SecondsPerSlot
	if dec.IsTaiko == nil {
		return errors.New("missing required field 'is_taiko' for ChainSpec")
	}
	c.IsTaiko = *dec.IsTaiko
	return nil
}
